#!/usr/bin/ruby

require 'json'
require 'set'

class Person
	attr_reader :id, :name, :following
	attr_accessor :index, :lowlink, :on_stack
	
	def initialize(id, name)
		@id = id
		@name = name
		@following = []
	end
	
	def follow(id)
		@following << id
	end
end

class NSA
	def initialize(min_group_size, stream)
		@min_group_size = min_group_size
		@next_id = 0
		@people = {}
		@people_ids = {}  # reverse mapping from person to id
		@sccs = []

		data = JSON.parse stream.read
		data.each do |friend_pair|
			raise "wat" unless friend_pair.size == 2
			id0 = find_or_add_person(friend_pair[0])
			id1 = find_or_add_person(friend_pair[1])
			@people[id0].follow(id1)
		end	
	end

	def solve
		@stack = []
		@index = 0
		@people.each_key do |id|
			person = @people[id]
			find_scc(person) if person.index.nil?
		end
		puts @sccs.to_json
	end
	
private
	# yes, this is shamelessly lifted from wikipedia, but
	# I *did* get much of the way here on my own before I realized
	# "this has _got_ to be an established algorithm in computer science"
	# and I remembered "directed graph" from my CS days
	# and I did some googling. that was the point, right?
	# (here I go defending my hack contest code again)
	def find_scc(person)
		person.index = person.lowlink = @index
		@index += 1
		@stack.push(person)
		person.on_stack = true
		person.following.each do |id|
			w = @people[id]
			if w.index.nil?
				# successor not visited yet
				find_scc(w)
				person.lowlink = [person.lowlink, w.lowlink].min
			elsif w.on_stack
				# successor already in scc
				person.lowlink = [person.lowlink, w.index].min
			end
		end
		
		if person.lowlink == person.index # root node
			scc = []
			loop do
				w = @stack.pop
				w.on_stack = false
				scc << w.name
				break if w.id == person.id
			end
			@sccs << scc if scc.length >= @min_group_size
		end
	end

	def find_or_add_person(name)
		@people_ids[name] || add_person(name)
	end

	def add_person(name)
		id = @next_id
		@next_id += 1
		@people[id] = Person.new(id, name)
		@people_ids[name] = id
		id
	end
end

if __FILE__ == $0
	min_group_size = ARGV.detect { |arg| arg =~ /--minimal-group-size=(\d+)/ } && $1
	raise "missing --minimal-group-size=N parameter" unless min_group_size
	NSA.new(min_group_size.to_i, STDIN).solve
end


